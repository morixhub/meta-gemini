diff --git a/drivers/gpu/drm/panel/panel-disen-ds070boe30t.c b/drivers/gpu/drm/panel/panel-disen-ds070boe30t.c
index e60ae29a46fa..750b682449c7 100644
--- a/drivers/gpu/drm/panel/panel-disen-ds070boe30t.c
+++ b/drivers/gpu/drm/panel/panel-disen-ds070boe30t.c
@@ -35,6 +35,9 @@ struct ds070boe30t_panel {
 		struct gpio_desc *updn;
 		struct gpio_desc *shlr;
 	} gpios;
+
+	bool prepared;
+	bool enabled;
 };
 
 static inline struct ds070boe30t_panel *panel_to_ds070boe30t_panel(struct drm_panel *panel)
@@ -47,6 +50,9 @@ static int ds070boe30t_panel_prepare(struct drm_panel *panel)
 	struct ds070boe30t_panel *ctx = panel_to_ds070boe30t_panel(panel);
 	int ret;
 
+	if (ctx->prepared)
+		return 0;
+
 	ret = regulator_enable(ctx->supply);
 	if (ret < 0) {
 		dev_err(&ctx->dsi->dev, "Failed to enable supply: %d\n", ret);
@@ -58,6 +64,9 @@ static int ds070boe30t_panel_prepare(struct drm_panel *panel)
 	msleep(20);
 	gpiod_set_value(ctx->gpios.reset, 1);
 	msleep(20);
+
+	ctx->prepared = true;
+
 	return 0;
 }
 
@@ -65,25 +74,61 @@ static int ds070boe30t_panel_unprepare(struct drm_panel *panel)
 {
 	struct ds070boe30t_panel *ctx = panel_to_ds070boe30t_panel(panel);
 
+	if (!ctx->prepared)
+		return 0;
+
 	gpiod_set_value(ctx->gpios.reset, 0);
 	gpiod_set_value(ctx->gpios.power, 0);
 	regulator_disable(ctx->supply);
 
+	ctx->prepared = false;
+
 	return 0;
 }
 
 static int ds070boe30t_panel_enable(struct drm_panel *panel)
 {
 	struct ds070boe30t_panel *ctx = panel_to_ds070boe30t_panel(panel);
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	int ret;
+
+	if (ctx->enabled)
+		return 0;
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret < 0) {
+		printk(KERN_ERR "%s: [2]\n", __func__);
+		dev_err(&dsi->dev, "Failed to exit sleep mode (%d)\n", ret);
+		return(ret);
+	}
+
+	msleep(120);
 
-	return mipi_dsi_dcs_exit_sleep_mode(ctx->dsi);
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret < 0) {
+		printk(KERN_ERR "%s: [4]\n", __func__);
+		dev_err(&dsi->dev, "Failed to set display ON (%d)\n", ret);
+		return(ret);
+	}
+
+	ctx->enabled = true;
+
+	return 0;
 }
 
 static int ds070boe30t_panel_disable(struct drm_panel *panel)
 {
 	struct ds070boe30t_panel *ctx = panel_to_ds070boe30t_panel(panel);
+	int err;
+
+	if (!ctx->enabled)
+		return 0;
 
-	return mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
+	err = mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
+
+	ctx->enabled = false;
+
+	return(err);
 }
 
 /* Default timings */
@@ -173,21 +218,24 @@ static int ds070boe30t_panel_dsi_probe(struct mipi_dsi_device *dsi)
 	 * We don't change the state of that GPIO later on but we need
 	 * to force it into a low state.
 	 */
-	ctx->gpios.updn = devm_gpiod_get(&dsi->dev, "updn", GPIOD_OUT_LOW);
+	ctx->gpios.updn = devm_gpiod_get_optional(&dsi->dev, "updn", GPIOD_OUT_LOW);
+
+	/*//!! 
 	if (IS_ERR(ctx->gpios.updn)) {
 		dev_err(&dsi->dev, "Couldn't get our updn GPIO\n");
 		return PTR_ERR(ctx->gpios.updn);
-	}
+	} */
 
 	/*
 	 * We don't change the state of that GPIO later on but we need
 	 * to force it into a low state.
 	 */
-	ctx->gpios.shlr = devm_gpiod_get(&dsi->dev, "shlr", GPIOD_OUT_LOW);
+	ctx->gpios.shlr = devm_gpiod_get_optional(&dsi->dev, "shlr", GPIOD_OUT_LOW);
+	/*//!!
 	if (IS_ERR(ctx->gpios.shlr)) {
 		dev_err(&dsi->dev, "Couldn't get our shlr GPIO\n");
 		return PTR_ERR(ctx->gpios.shlr);
-	}
+	}*/
 
 	ret = drm_panel_of_backlight(&ctx->panel);
 	if (ret)
