diff --git a/drivers/net/phy/broadcom.c b/drivers/net/phy/broadcom.c
index 04b2e6eeb195..06ff91978be8 100644
--- a/drivers/net/phy/broadcom.c
+++ b/drivers/net/phy/broadcom.c
@@ -20,6 +20,7 @@
 #include <linux/interrupt.h>
 #include <linux/irq.h>
 #include <linux/gpio/consumer.h>
+#include <dt-bindings/leds/common.h>
 
 #define BRCM_PHY_MODEL(phydev) \
 	((phydev)->drv->phy_id & (phydev)->drv->phy_id_mask)
@@ -414,14 +415,102 @@ static int bcm54xx_config_init(struct phy_device *phydev)
 	 * these settings will cause LOS to malfunction.
 	 */
 	if (!phy_on_sfp(phydev)) {
-		val = BCM54XX_SHD_LEDS1_LED1(BCM_LED_SRC_MULTICOLOR1) |
-			BCM54XX_SHD_LEDS1_LED3(BCM_LED_SRC_MULTICOLOR1);
-		bcm_phy_write_shadow(phydev, BCM54XX_SHD_LEDS1, val);
-
-		val = BCM_LED_MULTICOLOR_IN_PHASE |
-			BCM54XX_SHD_LEDS1_LED1(BCM_LED_MULTICOLOR_LINK_ACT) |
-			BCM54XX_SHD_LEDS1_LED3(BCM_LED_MULTICOLOR_LINK_ACT);
-		bcm_phy_write_exp(phydev, BCM_EXP_MULTICOLOR, val);
+		struct device_node *np = phydev->mdio.dev.of_node;
+		struct device_node *leds, *led = NULL;
+		u8 mode[2] = { BCM_LED_SRC_MULTICOLOR1, BCM_LED_SRC_MULTICOLOR1 };
+		u8 mcmode[2] = { BCM_LED_MULTICOLOR_LINK_ACT, BCM_LED_MULTICOLOR_LINK_ACT };
+		const char *func;
+		const char *mcfunc;
+		u32 val;
+		int ret;
+
+		/* Handle Link LED mode, if requested */
+		if (of_property_read_bool(np, "led-link-mode"))
+		{
+			val = bcm_phy_read_shadow(phydev, BCM54XX_SHD_SCR1);
+			if (val >= 0)
+			{
+				val = val | BCM54XX_SHD_SCR1_LINK_LED_MODE;
+				bcm_phy_write_shadow(phydev, BCM54XX_SHD_SCR1, val);
+			}
+		}
+
+		/* Handle LEDs configuration */
+		leds = of_find_node_by_name(np, "leds");
+		if (leds) {
+			for_each_available_child_of_node(leds, led) {
+				ret = of_property_read_u32(led, "reg", &val);
+				if (ret < 0 || val >= 2)
+					continue;
+
+				ret = of_property_read_string(led, "function", &func);
+				if (!ret)
+				{
+					if (!strcmp(func, LED_FUNCTION_SPEED1))
+						mode[val] = BCM_LED_SRC_LINKSPD1;
+					else if (!strcmp(func, LED_FUNCTION_SPEED2))
+						mode[val] = BCM_LED_SRC_LINKSPD2;
+					else if (!strcmp(func, LED_FUNCTION_TX))
+						mode[val] = BCM_LED_SRC_XMITLED;
+					else if (!strcmp(func, LED_FUNCTION_ACTIVITY))
+						mode[val] = BCM_LED_SRC_ACTIVITYLED;
+					else if (!strcmp(func, LED_FUNCTION_FDX))
+						mode[val] = BCM_LED_SRC_FDXLED;
+					else if (!strcmp(func, LED_FUNCTION_SLAVE))
+						mode[val] = BCM_LED_SRC_SLAVE;
+					else if (!strcmp(func, LED_FUNCTION_INTR))
+						mode[val] = BCM_LED_SRC_INTR;
+					else if (!strcmp(func, LED_FUNCTION_QUALITY))
+						mode[val] = BCM_LED_SRC_QUALITY;
+					else if (!strcmp(func, LED_FUNCTION_RX))
+						mode[val] = BCM_LED_SRC_RCVLED;
+					else if (!strcmp(func, LED_FUNCTION_MULTICOLOR))
+						mode[val] = BCM_LED_SRC_MULTICOLOR1;
+					else if (!strcmp(func, LED_FUNCTION_ENERGY))
+						mode[val] = BCM_LED_SRC_ENERGY;
+					else if (!strcmp(func, LED_FUNCTION_OFF))
+						mode[val] = BCM_LED_SRC_OFF;
+					else if (!strcmp(func, LED_FUNCTION_ON))
+						mode[val] = BCM_LED_SRC_ON;
+				}
+
+				ret = of_property_read_string(led, "multicolor-function", &mcfunc);
+				if (!ret)
+				{
+					if (!strcmp(mcfunc, LED_MC_FUNCTION_ENCODED_LINK_ACTIVITY))
+						mcmode[val] = BCM_LED_MULTICOLOR_LINK_ACT;
+					else if (!strcmp(mcfunc, LED_MC_FUNCTION_ENCODED_SPEED))
+						mcmode[val] = BCM_LED_MULTICOLOR_SPEED;
+					else if (!strcmp(mcfunc, LED_MC_FUNCTION_ACTIVITY_FLASH))
+						mcmode[val] = BCM_LED_MULTICOLOR_ACT_FLASH;
+					else if (!strcmp(mcfunc, LED_MC_FUNCTION_FDX))
+						mcmode[val] = BCM_LED_MULTICOLOR_FDX;
+					else if (!strcmp(mcfunc, LED_MC_FUNCTION_OFF))
+						mcmode[val] = BCM_LED_MULTICOLOR_OFF;
+					else if (!strcmp(mcfunc, LED_MC_FUNCTION_ON))
+						mcmode[val] = BCM_LED_MULTICOLOR_ON;
+					else if (!strcmp(mcfunc, LED_MC_FUNCTION_ALTERNATING))
+						mcmode[val] = BCM_LED_MULTICOLOR_ALT;
+					else if (!strcmp(mcfunc, LED_MC_FUNCTION_FLASHING))
+						mcmode[val] = BCM_LED_MULTICOLOR_FLASH;
+					else if (!strcmp(mcfunc, LED_MC_FUNCTION_LINK))
+						mcmode[val] = BCM_LED_MULTICOLOR_LINK;
+					else if (!strcmp(mcfunc, LED_MC_FUNCTION_ACTIVITY))
+						mcmode[val] = BCM_LED_MULTICOLOR_ACT;
+					else if (!strcmp(mcfunc, LED_MC_FUNCTION_PROGRAMMABLE_BLINK))
+						mcmode[val] = BCM_LED_MULTICOLOR_PROGRAM;
+				}
+			}
+		}
+
+		val = BCM54XX_SHD_LEDS1_LED1(mode[0]) |
+			BCM54XX_SHD_LEDS1_LED3(mode[1]);
+		bcm_phy_write_shadow(phydev, BCM54XX_SHD_LEDS1, val);
+
+ 		val = BCM_LED_MULTICOLOR_IN_PHASE |
+			BCM54XX_SHD_LEDS1_LED1(mcmode[0]) |
+			BCM54XX_SHD_LEDS1_LED3(mcmode[1]);
+ 		bcm_phy_write_exp(phydev, BCM_EXP_MULTICOLOR, val);
 	}
 
 	bcm54xx_ptp_config_init(phydev);
diff --git a/include/dt-bindings/leds/common.h b/include/dt-bindings/leds/common.h
index 9a0d33d027ff..1b7ee5046b61 100644
--- a/include/dt-bindings/leds/common.h
+++ b/include/dt-bindings/leds/common.h
@@ -103,4 +103,26 @@
 #define LED_FUNCTION_WLAN "wlan"
 #define LED_FUNCTION_WPS "wps"
 
+#define LED_FUNCTION_SPEED1 "speed-1"
+#define LED_FUNCTION_SPEED2 "speed-2"
+#define LED_FUNCTION_FDX "fdx"
+#define LED_FUNCTION_SLAVE "slave"
+#define LED_FUNCTION_INTR "intr"
+#define LED_FUNCTION_QUALITY "quality"
+#define LED_FUNCTION_MULTICOLOR "multicolor"
+#define LED_FUNCTION_ENERGY "energy"
+#define LED_FUNCTION_OFF "off"
+#define LED_FUNCTION_ON "on"
+
+#define LED_MC_FUNCTION_ENCODED_LINK_ACTIVITY "encoded-link-activity"
+#define LED_MC_FUNCTION_ENCODED_SPEED "encoded-speed"
+#define LED_MC_FUNCTION_ACTIVITY_FLASH "activity-flash"
+#define LED_MC_FUNCTION_FDX "fdx"
+#define LED_MC_FUNCTION_OFF "off"
+#define LED_MC_FUNCTION_ON "on"
+#define LED_MC_FUNCTION_ALTERNATING "alternating"
+#define LED_MC_FUNCTION_FLASHING "flashing"
+#define LED_MC_FUNCTION_LINK "link"
+#define LED_MC_FUNCTION_ACTIVITY "activity"
+#define LED_MC_FUNCTION_PROGRAMMABLE_BLINK "programmable-blink"
 #endif /* __DT_BINDINGS_LEDS_H */
diff --git a/include/linux/brcmphy.h b/include/linux/brcmphy.h
index c55810a43541..2261d511bfdd 100644
--- a/include/linux/brcmphy.h
+++ b/include/linux/brcmphy.h
@@ -160,6 +160,7 @@
 #define BCM_LED_SRC_WIRESPEED	0x9
 #define BCM_LED_SRC_MULTICOLOR1	0xa
 #define BCM_LED_SRC_OPENSHORT	0xb
+#define BCM_LED_SRC_ENERGY	0xc
 #define BCM_LED_SRC_OFF		0xe	/* Tied high */
 #define BCM_LED_SRC_ON		0xf	/* Tied low */
 #define BCM_LED_SRC_MASK	GENMASK(3, 0)
@@ -187,6 +188,10 @@
  * register to access.
  */
 
+/* 00010: Spare Control Register 1 */
+#define BCM54XX_SHD_SCR1		0x02
+#define BCM54XX_SHD_SCR1_LINK_LED_MODE	1
+
 /* 00100: Reserved control register 2 */
 #define BCM54XX_SHD_SCR2		0x04
 #define  BCM54XX_SHD_SCR2_WSPD_RTRY_DIS	0x100
